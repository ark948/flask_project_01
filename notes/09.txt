trying to fix routes, change underscore to dash in auth

Patterns to consider: keep test routes to minimal, no redirect, no flash message

Changed log file backup to 0, Adds 'Roff' to repo languages

1. Admin blueprint - Admin panel:
features to implement:
custom model for admins
custom views for admins
custom model views for admins
custom login_required decorator for admins
custom forms for admins

Now where to start? A new model or initializing the flask-admin package?

We can choose to either extend the current user model to have an is_admin field, or implement separate admin model.
I will make a separate model for admins.
Problem: if to make a separate model for admins, the user loader function from flask-login will have issues.
There is also the base class 'Person' approach than user and admin model can derive from later.

For now, i'll just go along with the flask cookbook and use already defined user model.

Added admin boolean field and is_admin method to user model. A database migration is required.
Forgot to add default field. should i delete the migration file or just go with it. I'm deleting it. Better to be specific about everything.

apparently the flask cookbook is implementing admin panel without the flask-admin extention, at first try.

VERY IMPORTANT:
the reason that no error would be showed if csrf_token was missing, is that 'if form.errors' was not added to the end of route. From now on this will be a permanent pattern for me.

Trying to convert index routes to class-based views.
Generally, there are two classes to inherit from, when using class-based views, View and MethodView
class-based views needs to be registered after creation.

main index view converted to class.

I don't think class-based views are very useful, they add extra complexity.
Best saved for apis.

Adding flask-admin to init...
Big problem, having a blueprint named 'admin' and the instance of the flask_admin being named 'admin' is causing problems.
This does not make any sense anymore. Having a admin blueprint and using this extension. Too much work and messy code.
One possible solution: Nested blueprints. One 'admin' blueprint as the main. and two sub-blueprints.
One for manual admin section and one for extension which we'll call automatic.

Still throws error, having a blueprint named admin and an extension named admin, causes conflict.
had to change the admin blueprint to main_admin just so flask_admin can be initialized.

I was able to make sure that both admin blueprints work fine. However, another problem has been raised.
Maybe if i changed the my own admin template folder name... Did not work. Now flask_admin is taking over completely.
This doesn't work. even tried to changed the name. changed everything.

This is no longer practical. I will move my own admin panel to auth as a child blueprint.
and add a admin.py file for flask-admin. (done)

no more able to follow flaskcookbook. it needs to be read sequentially.

feature to implement:
ckeditor in user model (for not field)

first use wtforms, to customize textareafield
then customize flask-admin to use this (overriding)

but before that, i will revert flask-admin to basic model view, and try to implement this feature on my own admin panel.
there is also flask-ckeditor extension
so basically there are three wasy:
1. using flask-cookbook methods, to (wtforms custom ckeditor and flask-admin)
2. flask-ckeditor extension
3. customizing wtform field with ckeditor widget and then just rendering it.

IMPORTANT: flask-admin on its own is useless. Since user model does not store plain text passwords, flask-admin,
user creation form needs to be heavily modified to work. Therefore i will just keep it here without anymore modification,
and read the docs, and then edit it later.
For now i'll just try to implement ckeditor on my own admin panel.