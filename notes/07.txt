Before implementing email verification and password reset, i fixed a small problem.

When the inner app folder was named 'app', some context shell variables would not work, like sa and so.
(flask_shop_vscode > app - run.py)

This was fixed by changing the inner app folder to source.
(flask_shop_vscode > source - run.py)
and adding .env file and loading it in config.py file.
Now shell context works perfectly.
IMPORTANT: .env file must be added to gitignore.

Email support was added, now adding password reset: (some small edits may be required)

1. Install flask-mail
pip install flask-mail
to generate json web tokens, use pyjwt
pip install pyjwt

2. Initialize flask-mail in source/__init__.py file
from flask_mail import Mail
mail = Mail()
def create_app()...
    mail.init_app(app)

3. Run aiosmtpd email server in second terminal and leave it running

4. Adding a helper function to send email in a new file, source/email.py:
from flask_mail import Message
from app import mail

def send_email(subject, sender, recipients, text_body, html_body):
    msg = Message(subject, sender=sender, recipients=recipients)
    msg.body = text_body
    msg.html = html_body
    mail.send(msg)

5. Create a password reset request form in auth/forms.py:
class ResetPasswordRequestForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    submit = SubmitField('Request Password Reset')
(note: Email() may not work, or may require another package called email-validator)

6. Add a password reset request route to auth/routes.py:
from app.forms import ResetPasswordRequestForm
from app.email import send_password_reset_email
@bp.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = ResetPasswordRequestForm()
    if form.validate_on_submit():
        user = db.session.scalar(
            sa.select(User).where(User.email == form.email.data))
        if user:
            send_password_reset_email(user)
        flash('Check your email for the instructions to reset your password')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_password_request.html', form=form)

7. Add password reset request template to auth/templates:
{% extends "base.html" %}
{% block content %}
<h3 style="padding-right: 50px; padding-top: 50px;">بازیابی رمزعبور</h3>
{% from "macros/_formhelpers.html" import render_field %}
<form style="padding-right: 50px; padding-top: 50px;" method="post">
    {{ form.csrf_token() }}
    {{ render_field(form.email) }}
    {{ captcha_html(captcha)|safe }}
    {{ render_field(form.submit) }}
</form>
{% endblock %}

8. Add a link for reset request to login page, so users can access it.
    <p>
        Forgot Your Password?
        <a href="{{ url_for('auth.reset_password_request') }}">Click to Reset It</a>
    </p>

9. Add two methods to user model, one for generating tokens, and one for verifiying them. Second one must be 
static method, so users can use them without being logged in to application:
class User...
    def get_reset_password_token(self, expires_in=600):
        return jwt.encode(
            {'reset_password': self.id, 'exp': time() + expires_in},
            current_app.config['SECRET_KEY'], algorithm='HS256'
        )
    
    @staticmethod
    def verify_reset_password_token(token):
        try:
            id = jwt.decode(token, current_app.config['SECRET_KEY'], algorithms=['HS256'])['reset_password']
        except:
            return
        return db.session.get(User, id)
    
    def __repr__(self) -> str:
        return f'<User {self.id}'

10. Add a function to generate a template for emails with reset links to email.py:
def send_password_reset_email(user):
    token = user.get_reset_password_token()
    send_email('بازیابی رمز عبور', sender=current_app.config['ADMINS'][0], recipients=[user.email],
               text_body=render_template('email/reset_password.txt', user=user, token=token),
               html_body=render_template('email/reset_password.html', user=user, token=token)
               )
    
11. Add two templates to new directory templates/email/:
reset_password.txt:
کاربر عزیز {{ user.username }}

برای بازیابی رمز عبور، لطفا از لینک زیر استفاده کنید.
{{ url_for('auth.reset_password', token=token, _external=True )}}
در صورتی این ایمیل را درخواست نکرده اید، لطفا آن را نادیده بگیرید.
با تشکر

reset_password.html:
<!doctype html>
<html>
    <body>
        <p>Dear {{ user.username }},</p>
        <p>
            برای بازیابی رمز عبور
            <a href="{{ url_for('auth.reset_password', token=token, _external=True) }}">
                کلیک کنید.
            </a>.
        </p>
        <p>یا می توانید لینک زیر را در مرورگر خود کپی کنید.:</p>
        <p>{{ url_for('auth.reset_password', token=token, _external=True) }}</p>
        <p>در صروتی که این ایمیل را درخواست نکرده اید، لطفا آن را نادیده بگیرید.</p>
        <p>با تشکر</p>
    </body>
</html>

12. Create reset_password form and add it to auth/forms.py (this file actual does the reseting)
class ResetPasswordForm(FlaskForm):
    password = PasswordField('Password', validators=[DataRequired()])
    password2 = PasswordField(
        'Repeat Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Request Password Reset')

13. Add the reset_password route to auth/routes.py (does the actual reseting)
from app.forms import ResetPasswordForm

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    user = User.verify_reset_password_token(token)
    if not user:
        return redirect(url_for('index'))
    form = ResetPasswordForm()
    if form.validate_on_submit():
        user.set_password(form.password.data)
        db.session.commit()
        flash('Your password has been reset.')
        return redirect(url_for('login'))
    return render_template('reset_password.html', form=form)

14. Add a reset_password template to templates/auth:
{% extends "base.html" %}

{% block content %}
    <h1>Reset Your Password</h1>
    <form action="" method="post">
        {{ form.hidden_tag() }}
        <p>
            {{ form.password.label }}<br>
            {{ form.password(size=32) }}<br>
            {% for error in form.password.errors %}
            <span style="color: red;">[{{ error }}]</span>
            {% endfor %}
        </p>
        <p>
            {{ form.password2.label }}<br>
            {{ form.password2(size=32) }}<br>
            {% for error in form.password2.errors %}
            <span style="color: red;">[{{ error }}]</span>
            {% endfor %}
        </p>
        <p>{{ form.submit() }}</p>
    </form>
{% endblock %}

15. To make the emails async:
source/email.py:
from threading import Thread
# ...
def send_async_email(app, msg):
    with app.app_context():
        mail.send(msg)

def send_email(subject, sender, recipients, text_body, html_body):
    msg = Message(subject, sender=sender, recipients=recipients)
    msg.body = text_body
    msg.html = html_body
    Thread(target=send_async_email, args=(current_app._get_current_object(), msg)).start()